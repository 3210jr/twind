import { BaseTheme, Context, Shifts, Layer } from '../types'
import type { SingleParsedRule } from './parse'
import { mql } from '../utils'
import { toClassName } from './to-class-name'

// Based on https://github.com/kripod/otion
// License MIT

export { Shifts, Layer }

/*
To have a predictable styling the styles must be ordered.

This order is represented by a precedence number. The lower values
are inserted before higher values. Meaning higher precedence styles
overwrite lower precedence styles.

Each rule has some traits that are put into a bit set which form
the precedence:

| bits | trait                                                |
| ---- | ---------------------------------------------------- |
| 1    | dark mode                                            |
| 2    | layer: preflight, global, components, utilities, css |
| 1    | screens: is this a responsive variation of a rule    |
| 5    | responsive based on min-width                        |
| 4    | at-rules                                             |
| 18   | pseudo and group variants                            |
| 4    | number of declarations (descending)                  |
| 4    | greatest precedence of properties                    |

**Dark Mode: 1 bit**

Flag for dark mode rules.

**Layer: 3 bits**

- defaults = 0: The preflight styles and any base styles registered by plugins.
- vase = 1: The global styles registered by plugins.
- components = 2
- variants = 3
- compounds = 4
- shortcuts = 5
- utilities = 6: Utility classes and any utility classes registered by plugins.
- css = 7: Styles generated by css

**Screens: 1 bit**

Flag for screen variants. They may not always have a `min-width` to be detected by _Responsive_ below.

**Responsive: 4 bits**

Based on extracted `min-width` value:

- 576px -> 3
- 1536px -> 10
- 36rem -> 3
- 96rem -> 9

**At-Rules: 4 bits**

Based on the count of special chars (`-:,`) within the at-rule.

**Pseudo and group variants: 18 bits**

Ensures predictable order of pseudo classes.

- https://bitsofco.de/when-do-the-hover-focus-and-active-pseudo-classes-apply/#orderofstyleshoverthenfocusthenactive
- https://developer.mozilla.org/docs/Web/CSS/:active#Active_links
- https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/defaultConfig.stub.js#L718

**Number of declarations (descending): 4 bits**

Allows single declaration styles to overwrite styles from multi declaration styles.

**Greatest precedence of properties: 4 bits**

Ensure shorthand properties are inserted before longhand properties; eg longhand override shorthand
*/

export function moveToLayer(precedence: number, layer: number): number {
  // Set layer (first reset, than set)
  return (precedence & ~Layer.css) | layer
}

/*
To set a bit: n |= mask;
To clear a bit: n &= ~mask;
To test if a bit is set: (n & mask)

Bit shifts for the primary bits:

| bits | trait                                                   | shift |
| ---- | ------------------------------------------------------- | ----- |
| 1    | dark mode                                               | 30    |
| 3    | layer: preflight, global, components, utilities, css    | 27    |
| 1    | screens: is this a responsive variation of a rule       | 26    |
| 4    | responsive based on min-width, max-width or width       | 22    |
| 4    | at-rules                                                | 18    |
| 18   | pseudo and group variants                               | 0     |

Layer: 0 - 7: 3 bits
  - defaults = 0
  - preflight = 1
  - components = 2
  - matches = 3
  - shortcuts = 4
  - utilities = 5
  - css = 6
  - overrides = 7

These are calculated by serialize and added afterwards:

| bits | trait                               |
| ---- | ----------------------------------- |
| 4    | number of selectors (descending) |
| 4    | number of declarations (descending) |
| 4    | greatest precedence of properties   |

These are added by shifting the primary bits using multiplication as js only
supports bit shift up to 32 bits.
*/

// Colon and dash count of string (ascending)
export function seperatorPrecedence(string: string): number {
  return string.match(/[-=:;]/g)?.length || 0
}

export function atRulePrecedence(css: string): number {
  // 0=none, 1=sm, 2=md, 3=lg, 4=xl, 5=2xl, 6=??, 7=??
  // 0 - 15: 4 bits (max 150rem or 2250px)
  //  576px -> 3
  // 1536px -> 10
  //  36rem -> 3
  //  96rem -> 9
  return (
    (Math.min(
      /(?:^|width[^\d]+)(\d+(?:.\d+)?)(p)?/.test(css) ? +RegExp.$1 / (RegExp.$2 ? 15 : 1) / 10 : 0,
      15,
    ) <<
      Shifts.responsive) |
    (Math.min(seperatorPrecedence(css), 15) << Shifts.atRules)
  )
}

// Pesudo variant presedence
// Chars 3 - 8: Uniquely identifies a pseudo selector
// represented as a bit set for each relevant value
// 18 bits: one for each variant plus one for unknown variants
//
// ':group-*' variants are normalized to their native pseudo class (':group-hover' -> ':hover')
// as they already have a higher selector presedence due to the add '.group' ('.group:hover .group-hover:...')

// Sources:
// - https://bitsofco.de/when-do-the-hover-focus-and-active-pseudo-classes-apply/#orderofstyleshoverthenfocusthenactive
// - https://developer.mozilla.org/docs/Web/CSS/:active#Active_links
// - https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/defaultConfig.stub.js#L718

const PRECEDENCES_BY_PSEUDO_CLASS = [
  /* fi */ 'rst' /* : 0 */,
  /* la */ 'st' /* : 1 */,
  /* ev */ 'en' /* : 2 */,
  /* od */ 'd' /* : 3 */,
  /* li */ 'nk' /* : 4 */,
  /* vi */ 'sited' /* : 5 */,
  /* em */ 'pty' /* : 6 */,
  /* ch */ 'ecked' /* : 7 */,
  /* fo */ 'cus-w' /* ithin : 8 */,
  /* ho */ 'ver' /* : 9 */,
  /* fo */ 'cus' /* : 10 */,
  /* fo */ 'cus-v' /* isible : 11 */,
  /* ac */ 'tive' /* : 12 */,
  /* di */ 'sable' /* d : 13 */,
  /* re */ 'ad-on' /* ly: 14 */,
  /* op */ 'tiona' /* l: 15 */,
  /* re */ 'quire' /* d: 16 */,
]

export function pseudoPrecedence(selector: string): number {
  // use first found pseudo-class
  return (
    1 <<
    ~(
      (/:([a-z-]+)/.test(selector) &&
        ~PRECEDENCES_BY_PSEUDO_CLASS.indexOf(RegExp.$1.slice(2, 7))) ||
      ~17
    )
  )
}

// https://github.com/kripod/otion/blob/main/packages/otion/src/propertyMatchers.ts
// "+1": [
// 	/* ^border-.*(w|c|sty) */
// 	"border-.*(width,color,style)",

// 	/* ^[tlbr].{2,4}m?$ */
// 	"top",
// 	"left",
// 	"bottom",
// 	"right",

// 	/* ^c.{7}$ */
// 	"continue",
// ],

// "-1": [
// 	/* ^[fl].{5}l */
// 	"flex-flow",
// 	"line-clamp",

// 	/* ^g.{8}$ */
// 	"grid-area",

// 	/* ^pl */
// 	"place-content",
// 	"place-items",
// 	"place-self",
// ],

// group: 1 => +1
// group: 2 => -1

// 0 - 15 => 4 bits
// Ignore vendor prefixed and custom properties
export function declarationPropertyPrecedence(property: string): number {
  return property[0] == '-'
    ? 0
    : seperatorPrecedence(property) +
        (/^(?:(border-(?!w|c|sty)|[tlbr].{2,4}m?$|c.{7}$)|([fl].{5}l|g.{8}$|pl))/.test(property)
          ? +!!RegExp.$1 /* +1 */ || -!!RegExp.$2 /* -1 */
          : 0) +
        1
}

export interface ConvertedRule {
  name?: string | undefined
  precedence: number
  conditions?: string[]
  important?: boolean | undefined
}

export function convert<Theme extends BaseTheme = BaseTheme>(
  { name, important, variants = [] }: Partial<SingleParsedRule>,
  context: Context<Theme>,
  precedence: number,
  conditions: string[] = [],
): ConvertedRule {
  if (name) {
    name = toClassName({ name, important, variants })
  }

  for (const variant of variants) {
    const screen = context.theme('screens', variant)

    const condition = (screen && mql(screen)) || context.variant(variant)

    conditions = [...conditions, condition]

    precedence |= screen
      ? (1 << Shifts.screens) | atRulePrecedence(condition)
      : variant == 'dark'
      ? 1 << Shifts.darkMode
      : condition[0] == '@'
      ? atRulePrecedence(condition)
      : pseudoPrecedence(condition)
  }

  return { name, precedence, conditions, important }
}
